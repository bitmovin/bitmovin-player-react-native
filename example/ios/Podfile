require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

source 'https://cdn.cocoapods.org'
source 'https://github.com/react-native-tvos/react-native-tvos-podspecs.git'

prepare_react_native_project!

def setup os
  inhibit_all_warnings!
  platform os, '14.0'

  # If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
  # because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
  #
  # To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
  # ```js
  # module.exports = {
  #   dependencies: {
  #     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
  # ```
  flipper_config = (ENV['NO_FLIPPER'] == "1" || os != :ios) ? FlipperConfiguration.disabled : FlipperConfiguration.enabled
  linkage = ENV['USE_FRAMEWORKS']
  if linkage != nil
    Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
    use_frameworks! :linkage => linkage.to_sym
  end

  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'RNBitmovinPlayer', :path => '../..'
end

target 'BitmovinPlayerReactNativeExample' do
  setup :ios
  pod 'google-cast-sdk', '4.8.1'
end

target 'BitmovinPlayerReactNativeExample-tvOS' do
  setup :tvos
end

post_install do |installer|
  react_native_post_install(
    installer,
    # Set `mac_catalyst_enabled` to `true` in order to apply patches
    # necessary for Mac Catalyst builds
    :mac_catalyst_enabled => false
  )
  fix_simulator_run(installer)
  fix_deployment_target(installer)
  disable_resource_bundle_signing(installer)
end

# Workaround for running on simulator on Apple Silicon from the command-line
def fix_simulator_run(installer)
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      config.build_settings["EXCLUDED_ARCHS[sdk=appletvsimulator*]"] = "i386"
    end
  end
end

# Align deployment target of all targets in the Pods project with the main project
def fix_deployment_target(installer)
  return if !installer
  project = installer.pods_project
  project_deployment_target_iOS = project.build_configurations.first.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
  project_deployment_target_tvOS = project.build_configurations.first.build_settings['TVOS_DEPLOYMENT_TARGET']

  project.targets.each do |target|
    target.build_configurations.each do |config|
      old_target_iOS = config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
      unless old_target_iOS.nil?
        new_target_iOS = project_deployment_target_iOS
        next if old_target_iOS.to_f >= new_target_iOS.to_f
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = new_target_iOS
      end

      old_target_tvOS = config.build_settings['TVOS_DEPLOYMENT_TARGET']
      unless old_target_tvOS.nil?
        new_target_tvOS = project_deployment_target_tvOS
        next if old_target_tvOS.to_f >= new_target_tvOS.to_f
        config.build_settings['TVOS_DEPLOYMENT_TARGET'] = new_target_tvOS
      end
    end
  end
end

# Workaround against required code-signing for resource bundle targets
def disable_resource_bundle_signing(installer)
  installer.pods_project.targets.each do |target|
    target_is_resource_bundle = target.respond_to?(:product_type) && target.product_type == 'com.apple.product-type.bundle'
    target.build_configurations.each do |config|
      if target_is_resource_bundle
        config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      end
    end
  end
end
